[{"D:\\Projects\\weather-api-react\\src\\App.js":"1","D:\\Projects\\weather-api-react\\src\\index.js":"2","D:\\Projects\\weather-api-react\\src\\components\\Form.js":"3","D:\\Projects\\weather-api-react\\src\\components\\ResultNow.js":"4","D:\\Projects\\weather-api-react\\src\\components\\ForecastResult.js":"5"},{"size":843,"mtime":1609967463255,"results":"6","hashOfConfig":"7"},{"size":284,"mtime":1609551236395,"results":"8","hashOfConfig":"7"},{"size":3869,"mtime":1609966833955,"results":"9","hashOfConfig":"7"},{"size":1490,"mtime":1609965142923,"results":"10","hashOfConfig":"7"},{"size":406,"mtime":1609970973484,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1os3xoq",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Projects\\weather-api-react\\src\\App.js",[],"D:\\Projects\\weather-api-react\\src\\index.js",[],"D:\\Projects\\weather-api-react\\src\\components\\Form.js",["23","24","25"]," \r\nimport React, { Component } from 'react';\r\nimport './Styles/Form.css'\r\nimport axios from 'axios'\r\n\r\nclass Form extends Component {\r\n\r\n    state = {\r\n        city: '',\r\n        error: '',\r\n        api_key: '2b6796993859f84b8808fad453263671',\r\n        lon: '',\r\n        lat: ''\r\n    }\r\n\r\n\r\n    timeConverter(UNIX_timestamp) {\r\n        const a = new Date(UNIX_timestamp * 1000);\r\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        const year = a.getFullYear();\r\n        const month = months[a.getMonth()];\r\n        const date = a.getDate();\r\n        var hour = a.getHours();\r\n        var min = a.getMinutes();\r\n        var sec = a.getSeconds();\r\n        var time = date + ' ' + month + ' ' + year;\r\n        return time;\r\n    }\r\n\r\n\r\n    getTodayDate() {\r\n        var today = new Date();\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear(); \r\n        today = yyyy + '-' + mm + '-' + dd; \r\n        return today\r\n    }\r\n\r\n    getYesterdayDate() {\r\n        var yesterday = new Date(Date.now() - 86400000);\r\n        var dd = String(yesterday.getDate()).padStart(2, '0');\r\n        var mm = String(yesterday.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = yesterday.getFullYear();\r\n\r\n        yesterday = yyyy + '-' + mm + '-' + dd;\r\n        return yesterday\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleForcast = async (e) => { \r\n        \r\n        e.preventDefault();\r\n        const { api_key, lon, lat } = this.state; \r\n        const forcastUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly&appid=${api_key}`\r\n\r\n        const response = await axios.get(forcastUrl)\r\n\r\n        \r\n       this.props.weatherForecast(response.data);    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { city, api_key } = this.state;\r\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_key}`\r\n        if (prevState.city !== this.state.city) {\r\n            axios.get(url).then(res => {\r\n                    this.setState({ lon: res.data.coord.lon, lat: res.data.coord.lat })\r\n                }\r\n                ).catch(console.clear())\r\n        } \r\n    }\r\n\r\n\r\n\r\n\r\n    handleNow = (e) => {\r\n        e.preventDefault(); \r\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${this.state.api_key}`\r\n        axios.get(url)\r\n            .then(response => {\r\n                this.props.currentWeather(response.data) \r\n                this.setState({ error: '' })\r\n            })\r\n            .catch(error => {\r\n                this.props.currentWeather('') \r\n                this.setState({\r\n                    error: 'Location was not found.'\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n \r\n        return (\r\n            <div> \r\n                <form className=\"bg-light\">\r\n                    <h3 className=\"text-danger\">Weahter API</h3>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"city\">City</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"city\" name=\"city\" value={this.state.city} onChange={this.handleChange} />\r\n                    </div> \r\n                    <button className=\"btn btn-warning mr-5\" onClick={this.handleForcast}>Show forecast weather</button>\r\n                    <button className=\"btn btn-success\" onClick={this.handleNow}>Show weather now</button> \r\n                    <p className=\"text-danger p-3\">{this.state.error}</p>\r\n                </form> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","D:\\Projects\\weather-api-react\\src\\components\\ResultNow.js",[],"D:\\Projects\\weather-api-react\\src\\components\\ForecastResult.js",["26"],{"ruleId":"27","severity":1,"message":"28","line":23,"column":13,"nodeType":"29","messageId":"30","endLine":23,"endColumn":17},{"ruleId":"27","severity":1,"message":"31","line":24,"column":13,"nodeType":"29","messageId":"30","endLine":24,"endColumn":16},{"ruleId":"27","severity":1,"message":"32","line":25,"column":13,"nodeType":"29","messageId":"30","endLine":25,"endColumn":16},{"ruleId":"27","severity":1,"message":"33","line":3,"column":8,"nodeType":"29","messageId":"30","endLine":3,"endColumn":13},"no-unused-vars","'hour' is assigned a value but never used.","Identifier","unusedVar","'min' is assigned a value but never used.","'sec' is assigned a value but never used.","'Chart' is defined but never used."]